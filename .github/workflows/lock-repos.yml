name: Finalize migration

on:
  issue_comment:
    types: [created]
  
permissions:
  issues: write
  contents: read

jobs:
  lock-repositories:
    name: Finalize migration
    runs-on: test

    if: github.event_name == 'issue_comment' &&
      contains(github.event.comment.body, '/lock-repos')

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Parse issue body
        id: parse-issue-body
        uses: stefanbuck/github-issue-parser@v3

      - run: echo $JSON_STRING
        env:
          JSON_STRING: ${{ steps.parse-issue-body.outputs.jsonString }}

      - name: Lock source repositories
        id: lock-repos
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SOURCE_ADMIN_TOKEN }}
          # base-url: "https://${{ vars.SOURCE_HOST }}/api/v3"
          script: |
            const repositories = process.env.REPOSITORIES.split('\n');
            let isfailed = false;
            await Promise.all(repositories.map(async (sourceRepo) => {
              if (sourceRepo) {
                let repoName = sourceRepo.split('/').pop().replace(/\r$/, '');
                const url = new URL(sourceRepo);
                const orgName = url.pathname.split('/')[1];
                core.info(`Locking ${orgName}/${repoName}`);
                try {
                  await github.rest.migrations.startForOrg({
                    org: orgName,
                    repositories: [repoName],
                    lock_repositories: true,
                    exclude: ['repositories'],
                  });
                } catch (error) {
                  core.error(`Failed to lock ${orgName}/${repoName}: ${error.message}`);
                  isfailed = true;
                }
              }
            }));
            if (isfailed) {
              core.setFailed('Failed to lock one or more repositories');
            }
        env:
          REPOSITORIES: ${{ steps.parse-issue-body.outputs.issueparser_repositories }}

      - name: Add issue comment
        if: ${{ success() }}
        uses: actions/github-script@v7
        with:
          script: |
            let body = `**:lock: The source repo(s) have been locked and the migration finished**.\n\n
            If you made a mistake and want to unlock the source repo(s), add the following comment to this issue:
  
            \`\`\`
            /unlock-repos
            \`\`\`
            `
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

      - name: Add finished label
        if: ${{ success() }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ["finished"],
            })
            
      - name: Close issue
        if: ${{ success() }}
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: "closed"
            })

      - name: Add issue failure comment
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            let body = `**:x: There was an error locking the repo(s).** [View workflow run for details](${context.payload.repository.html_url}/actions/runs/${context.runId})`
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })
